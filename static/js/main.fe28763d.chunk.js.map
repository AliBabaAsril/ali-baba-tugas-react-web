{"version":3,"sources":["CountryPicker.js","CoronaTracker.js","App.js","serviceWorker.js","index.js"],"names":["CountryPicker","props","fetchCountries","axios","get","then","response","setState","countries","data","handleChange","event","value","target","handleCountryChange","state","country","this","FormControl","NativeSelect","onChange","map","c","key","name","Component","CoronaTracker","confirm","confirmed","deaths","recovered","getData","positif","meninggal","sembuh","lastupdate","lastUpdate","catch","error","console","log","Fragment","className","Date","toDateString","Number","toLocaleString","start","end","duration","separator","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fe28763d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\n\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport default class CountryPicker extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            countries:[],\r\n            country:\"\"\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchCountries()\r\n    }\r\n    fetchCountries=()=>{\r\n        axios.get(\"https://covid19.mathdro.id/api/countries\")\r\n        .then(response=>{\r\n            this.setState({\r\n                countries:response.data.countries\r\n            })\r\n        })\r\n    }\r\n    handleChange=(event)=>{\r\n        var value=event.target.value;\r\n        this.props.handleCountryChange(value);\r\n\r\n    }\r\n    render() {\r\n        return (\r\n          <center>\r\n              <FormControl>\r\n                  <NativeSelect onChange={this.handleChange}>\r\n                     <option>-- Countries --</option>\r\n                     {\r\n                         this.state.countries.map(c=>(\r\n                         <option key={c.name} value={c.name}>{c.name}</option>\r\n                         ))\r\n                     }\r\n                    \r\n                      </NativeSelect>\r\n                    \r\n                  </FormControl>\r\n              </center>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles/corona.css';\r\nimport CountUp from 'react-countup';\r\nimport CountryPicker from './CountryPicker'\r\n\r\nexport default class CoronaTracker extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            confirm: null,\r\n            deaths: null,\r\n            recovered: null,\r\n            lastupdate:null,\r\n            country: null,\r\n            positif: null,\r\n            meninggal: null,\r\n            sembuh: null,\r\n        }\r\n    }\r\n    handleCountryChange = (country) => {\r\n        axios.get(\"https://covid19.mathdro.id/api/countries/\" + country)\r\n            .then(response => {\r\n                this.setState({\r\n                    confirm: response.data.confirmed.value,\r\n                    deaths: response.data.deaths.value,\r\n                    recovered: response.data.recovered.value,\r\n                    \r\n                })\r\n            })\r\n    }\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n    getData = () => {\r\n        axios.get('https://covid19.mathdro.id/api')\r\n            .then(response => {\r\n                this.setState({\r\n                    positif: response.data.confirmed.value,\r\n                    meninggal: response.data.deaths.value,\r\n                    sembuh: response.data.recovered.value,\r\n                    lastupdate:response.data.lastUpdate,\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error.response);\r\n\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <br/>\r\n                <div className=\"corona-body\">\r\n                    <div className=\"container\">\r\n                        <div>\r\n                            <center className=\"judul\">INFORMASI UPDATE COVID-19</center><br/>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className=\"name\">\r\n                                <center>Global</center>\r\n                            </div>\r\n                            <center>\r\n                          <p className=\"lastupdate\">\r\n                                <u>\r\n                                  last update: {new Date(this.state.lastupdate).toDateString()}\r\n                                </u>\r\n                          </p>\r\n                          </center>\r\n                        </div>\r\n                        <center>\r\n                            <div className=\"card-deck card-decks\">\r\n                                <div className=\"card confirm box\">\r\n                                    <div className=\"card-title c-title\">\r\n                                        <center>Positif</center>\r\n\r\n                                    </div>\r\n                                    <div className=\"card-body c-body text-center\">\r\n                                        <div className=\"number\">\r\n                                        {Number(this.state.positif).toLocaleString('id')}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"card recovered box\">\r\n                                    <div className=\"card-title c-title\">\r\n                                        <center>Sembuh</center>\r\n\r\n                                    </div>\r\n                                    <div className=\"card-body c-body text-center\">\r\n                                        <div className=\"number\">\r\n                                            {Number(this.state.sembuh).toLocaleString('id')}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"card deaths box\">\r\n                                    <div className=\"card-title c-title\">\r\n                                        <center>Meninggal</center>\r\n\r\n                                    </div>\r\n                                    <div className=\"card-body c-body text-center\">\r\n                                        <div className=\"number\">\r\n                                        {Number(this.state.meninggal).toLocaleString('id')}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </center>\r\n                    </div><br /><br />\r\n                    <div className=\"name\">\r\n                        <center>Negara</center>\r\n\r\n                    </div>\r\n                    <div className=\"pencarian\">\r\n                        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                    </div>\r\n\r\n                    <div className=\"container\">\r\n                        <div className=\"card-deck card-decks\">\r\n                            <div className=\"card confirm box\">\r\n                                <div className=\"card-title c-title\">\r\n                                    <center>Positif</center>\r\n                                </div>\r\n                                \r\n                                <div className=\"card-body c-body text-center\">\r\n                                    <CountUp\r\n                                        start={0}\r\n                                        end={this.state.confirm}\r\n                                        duration={1}\r\n                                        separator=\".\"\r\n                                        className=\"number\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card recovered box\">\r\n                                <div className=\"card-title c-title\">\r\n                                    <center>Sembuh</center>\r\n\r\n                                </div>\r\n                                <div className=\"card-body c-body text-center\">\r\n                                    <CountUp\r\n                                        start={0}\r\n                                        end={this.state.recovered}\r\n                                        duration={1}\r\n                                        separator=\".\"\r\n                                        className=\"number\" />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card deaths box\">\r\n                                <div className=\"card-title c-title\">\r\n                                    <center>Meninggal</center>\r\n                                </div>\r\n                                <div className=\"card-body c-body text-center\">\r\n                                    <CountUp\r\n                                        start={0}\r\n                                        end={this.state.deaths}\r\n                                        duration={1}\r\n                                        separator=\".\"\r\n                                        className=\"number\" />\r\n                                </div>\r\n                            </div>\r\n                        </div><br />\r\n\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport CoronaTracker from './CoronaTracker';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <CoronaTracker/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}